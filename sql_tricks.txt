export PG_PASSWORD=XXXXX

pg_dump -U USER -t SCHEMA.TABLE -Fc DATABASE_NAME > FILENAME.tar
pg_restore -h DB_HOST -U USER -d DATABASE_NAME -v < FILENAME.tar

-- show running queries (9.2)
SELECT pid, age(clock_timestamp(), query_start), usename, query 
FROM pg_stat_activity 
WHERE query != '<IDLE>' AND query NOT ILIKE '%pg_stat_activity%' 
ORDER BY query_start desc;


--show table lock in organizations table
select pid, state, usename, query, query_start 
from pg_stat_activity 
where pid in (
  select pid from pg_locks l 
  join pg_class t on l.relation = t.oid 
  and t.relkind = 'r' 
  where t.relname = 'organizations'
);

---create a read only user 
CREATE USER USER_NAME WITH PASSWORD 'PASSWORD';
GRANT CONNECT ON DATABASE postgres TO USER_NAME;
GRANT USAGE ON SCHEMA SCHEMA_NAME TO USER_NAME;
GRANT SELECT ON ALL TABLES IN SCHEMA SCHEMA_NAME TO USER_NAME;

---create user to use in a specific schema
CREATE USER USER_NAME WITH PASSWORD 'PASSWORD_HERE';
GRANT CONNECT ON DATABASE postgres TO USER_NAME;
grant usage on schema SCHEMA_NAME to USER_NAME;
GRANT select, insert, update, delete on all tables in schema SCHEMA_NAME to USER_NAME;
GRANT ALL PRIVILEGES on ALL TABLES IN SCHEMA SCHEMA_NAME to USER_NAME;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA SCHEMA_NAME to USER_NAME;

-- show allow max conn in postgres db
show max_connections;

-- show running queries (9.2)
SELECT pid, age(clock_timestamp(), query_start), usename, query
FROM pg_stat_activity 
WHERE query != '<IDLE>' AND query NOT ILIKE '%pg_stat_activity%' 
ORDER BY query_start desc;

-- kill running query
SELECT pg_cancel_backend(procpid);

-- kill idle query
SELECT pg_terminate_backend(pid) from pg_stat_activity where state='idle in transaction';

-- vacuum command
VACUUM (VERBOSE, ANALYZE);

-- all database users
select * from pg_stat_activity where current_query not like '<%';

-- all databases and their sizes
select * from pg_user;

-- all tables and their size, with/without indexes
select datname, pg_size_pretty(pg_database_size(datname))
from pg_database
order by pg_database_size(datname) desc;

-- cache hit rates (should not be less than 0.99)
SELECT sum(heap_blks_read) as heap_read, sum(heap_blks_hit)  as heap_hit, (sum(heap_blks_hit) - sum(heap_blks_read)) / sum(heap_blks_hit) as ratio
FROM pg_statio_user_tables;

-- table index usage rates (should not be less than 0.99)
SELECT relname, 100 * idx_scan / (seq_scan + idx_scan) percent_of_times_index_used, n_live_tup rows_in_table
FROM pg_stat_user_tables 
ORDER BY n_live_tup DESC;

-- how many indexes are in cache
SELECT sum(idx_blks_read) as idx_read, sum(idx_blks_hit)  as idx_hit, (sum(idx_blks_hit) - sum(idx_blks_read)) / sum(idx_blks_hit) as ratio
FROM pg_statio_user_indexes;

-- Dump database on remote host to file
$ pg_dump -U username -h hostname databasename > dump.sql

-- Import dump into existing database
$ psql -d newdb -f dump.sql



